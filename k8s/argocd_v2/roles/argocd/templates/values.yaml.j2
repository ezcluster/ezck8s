

crds:
  install: {{ argocd_install_crds }}

controller:
  replicas: {{ argocd_replicas.controller }}

server:
  replicas: {{ argocd_replicas.server }}
{% if argocd_ingress_nginx_host is defined and argocd_ingress_nginx_host %}
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: {{ argocd_cluster_issuer }}
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    ingressClassName: nginx
    hosts:
    - {{ argocd_ingress_nginx_host }}
    tls:
    - secretName: argocd-server-tls
      hosts: # TBD (as list)
      - {{ argocd_ingress_nginx_host }}
{% else %}
  ingress:
    enabled: false
{% endif %}

repoServer:
  replicas: {{ argocd_replicas.repo_server }}
{% if argocd_kargo.enabled %}
  extraContainers:
    - name: kargo
      command: [/var/run/argocd/argocd-cmp-server] # Entrypoint should be Argo CD lightweight CMP server i.e. argocd-cmp-server
      imagePullPolicy: Always
      image: {{ argocd_image_prefix }}ghcr.io/kubedp/kargo:0.1.0
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - "ALL"
        seccompProfile:
          type: RuntimeDefault
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        # mitigate path traversal attacks.
        - mountPath: /tmp
          name: cmp-tmp
  volumes:
    - emptyDir: {}
      name: cmp-tmp
{% endif %}


applicationSet:
  enabled: {{ argocd_application_set.enabled }}
  replicaCount: {{ argocd_replicas.application_set }}

global:
  image:
    repository: {{ argocd_image_prefix }}quay.io/argoproj/argocd
{% if argocd_dockerconfigjson is defined and argocd_dockerconfigjson %}
  imagePullSecrets:
  - name: image-pull
{% endif %}

redis:
  image:
    repository: {{ argocd_image_prefix }}public.ecr.aws/docker/library/redis

dex:
  image:
{% if argocd_skas.enabled %}
    repository: {{ argocd_image_prefix }}ghcr.io/skasproject/dex
    tag: {{ argocd_skas.dex_image_tag }}
    imagePullPolicy: {{ argocd_skas.dex_imagePullPolicy }}
{% else %}
    repository: {{ argocd_image_prefix }}ghcr.io/dexidp/dex
{% endif %}

configs:
{% if argocd_skas.enabled %}
  cm:
    admin.enabled: false
    url: https://{{ argocd_ingress_nginx_host }}
    dex.config: |
      connectors:
      - type: skas
        id: skas
        name: SKAS
        config:
          loginPrompt: "User:"
          loginProvider:
            url: {{ argocd_skas.dex_skas_url }}
{% if argocd_skas.dexSkasCaData is defined %}
            rootCaData: {{ argocd_skas.dexSkasCaData }}
{% endif %}
{% endif %}
  rbac:
    policy.csv: |
      g, argocd-admin, role:admin
