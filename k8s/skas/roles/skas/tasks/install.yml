
# ----------------------------------------- Deployment

- name: Helm chart deployment
  block:
  - name: Create skas namespace
    k8s:
      state: present
      definition:
        api_version: v1
        kind: Namespace
        metadata:
          name: "{{ skas_namespace }}"

  - name: Setup value file
    template:
      src: "values.yaml.j2"
      dest: /tmp/skas_values.yaml


  # From https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
  # The default idempotency check can fail to report changes when release_state is set to present and chart_repo_url is defined. Install helm diff >= 3.4.1 for better results.
  # So, we first download the chart localy

  - name: Fetch the skas chart
    ansible.builtin.get_url:
      url: "{{ skas_helm_chart_url }}"
      dest: /tmp/skas_chart.tgz

  # We use shell helm as the kubernetes.core.helm module will not upgrade in most case
  - name: Deploy skas helm chart
    shell: helm -n "{{ skas_namespace }}" upgrade -i {{ skas_helm_release }} --values /tmp/skas_values.yaml /tmp/skas_chart.tgz
    args:
      chdir: /tmp

#  - name: Deploy skas helm chart
#    kubernetes.core.helm:
#      release_state: present
#      release_name: "{{ skas_helm_release }}"
#      release_namespace: "{{ skas_namespace}}"
#      create_namespace: false
#      chart_ref: "{{ skas_helm_chart_url }}"
#      values_files:
#        - /tmp/skas_values.yaml

  run_once: true
  when: skas_deploy_helm_chart


# ---------------------------------------------------------------------------
- name: API server configuration
  block:
  - name: Ensure target folder
    file:
      state: directory
      path: /etc/kubernetes/skas


  - name: Wait for certificate to be generated
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ skas_auth_cert_name }}"
      namespace: "{{ skas_namespace }}"
    register: k8s_result
    retries: 3
    delay: 10
    until: k8s_result.resources is defined and k8s_result.resources|length > 0

#  - debug: var=k8s_result

  - name: Decode the certificate
    set_fact:
      cacert: "{{k8s_result.resources[0].data['ca.crt']|b64decode}}"

#  - debug: var=cacert

  - name: And generate the certificate file
    copy:
      content: "{{cacert}}"
      dest: /etc/kubernetes/skas/skas_auth_ca.crt
      force: yes

  - name: "Copy skas_auth_ca.crt locally"
    fetch:
      src: /etc/kubernetes/skas/skas_auth_ca.crt
      dest: ./skas_auth_ca.crt
      flat: yes
    run_once: true

  - name: Copy authentication webhook config file
    template:
      src: hookconfig.yaml
      dest: /etc/kubernetes/skas/hookconfig.yaml

  - name: Configure kube api server (1/4)
    blockinfile:
      path: /etc/kubernetes/manifests/kube-apiserver.yaml
      insertafter: "^.*volumeMounts:.*"
      marker: "# Ansible skas config 1/4 hacking {mark}"
      block: |2
            - mountPath: /etc/kubernetes/skas
              name: skas-config

  - name: Configure kube api server (2/4)
    blockinfile:
      path: /etc/kubernetes/manifests/kube-apiserver.yaml
      insertafter: "^.*volumes:.*"
      marker: "# Ansible skas config 2/4 hacking {mark}"
      block: |2
          - hostPath:
              path: /etc/kubernetes/skas
              type: ""
            name: skas-config

  - name: Configure kube api server(3/4)
    lineinfile:
      path: /etc/kubernetes/manifests/kube-apiserver.yaml
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: '^.*- kube-apiserver'
    with_items:
    - { line: '    - --authentication-token-webhook-config-file=/etc/kubernetes/skas/hookconfig.yaml', regexp: '^.*authentication-token-webhook-config-file.*' }
    - { line: '    - --authentication-token-webhook-cache-ttl=30s', regexp: '^.*authentication-token-webhook-cache-ttl.*' }

  - name: Configure kube api server(4/4)
    lineinfile:
      path: /etc/kubernetes/manifests/kube-apiserver.yaml
      regexp: "^.*dnsPolicy:.*"
      line: '  dnsPolicy: ClusterFirstWithHostNet'
      insertafter: '^.*hostNetwork:.*'

  - name: Wait for api server to be back again
    wait_for:
      port: 6443
      state: started
      timeout: 300
      delay: 15

  when: skas_configure_apiserver

