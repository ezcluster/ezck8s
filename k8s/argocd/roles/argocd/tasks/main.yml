# Copyright (C) 2018 BROADSoftware
#
# This file is part of EzCluster
#
# EzCluster is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# EzCluster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with EzCluster.  If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.


- name: Install k8s ansible module required package (Redhat)
  yum: name=python2-openshift state=present
  when: ansible_os_family == "RedHat"
- name: Install k8s ansible module required package (Debian)
  block:
    - name: Install python3-pip with apt
      ansible.builtin.apt:
        name: python3-pip
        state: present
    - name: Pip install k8s required modules
      ansible.builtin.pip:
        name:
          - openshift==0.13.1
          - pyyaml==5.3.1
          - kubernetes==24.2.0
         # NB: Above values are know to work with kubespray 2.18.1 / k8s v1.22.8 on ubuntu 20.04
         # For example, kubernetes==25.3.0 will fail for next step in such context:
         # failed: [m0] (item=m0) => {"ansible_loop_var": "item", "changed": false, "item": "m0", "msg": "Failed to get client due to openssl_md5() takes at most 1 argument (2 given)"}
        extra_args: "{{ argocd_pip_extra_args | default(omit) }}"
  when: ansible_os_family == "Debian"

- name: Create argocd namespace
  k8s:
    api_version: v1
    kind: Namespace
    name: argocd
    state: present

- name: "Copy argocd deployment manifest from local files"
  copy:
    src: "{{argocd_manifest}}"
    dest: "/tmp/argocd.yaml"
  when: argocd_manifest is not match("http[s]?://.*")

- name: "Copy argocd deployment manifest from remote url"
  get_url:
    url: "{{argocd_manifest}}"
    dest: "/tmp/argocd.yaml"
  when: argocd_manifest is match("http[s]?://.*")

- name: "Normalize redis image declaration"
  replace:
    path: "/tmp/argocd.yaml"
    regexp: 'image:[\s]*redis'
    replace: "image: docker.io/redis"

- name: "Add image prefix"
  replace:
    path: "/tmp/argocd.yaml"
    regexp: 'image:[\s]*{{item}}'
    replace: "image: {{argocd_image_prefix}}{{item}}"
  when: argocd_image_prefix is defined and argocd_image_prefix != ""
  with_items:
    - docker.io
    - quay.io
    - ghcr.io

- name: Install argocd
  k8s:
    state: present
    src: "/tmp/argocd.yaml"
    namespace: argocd

- name: Patch for granting root access to argocd-applicationset-controller (To review)
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: psp:privileged:pspfree
        namespace: argocd
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: psp:privileged
      subjects:
        - kind: ServiceAccount
          name: argocd-applicationset-controller
          namespace: argocd

- block:
  - name: Generate the LoadBalancer manifest
    template:
      src: service_patchlb.yaml.j2
      dest: "/tmp/service_patchlb.yaml"
    
  - name: Apply the LoadBalancer manifest
    k8s:
      state: present
      src:  "/tmp/service_patchlb.yaml"
      namespace: argocd
  when: argocd_load_balancer_ip is defined

- block:
  - name: Generate the ingress_nginx manifest
    template:
      src: ingress_nginx.yaml.j2
      dest: "/tmp/ingress_nginx.yaml"
    
  - name: Apply the ingress_nginx manifest
    k8s:
      state: present
      src:  "/tmp/ingress_nginx.yaml"
      namespace: argocd
  when: argocd_ingress_nginx_host is defined

